# portability is probably going to be removed or disabled since it would trigger a lot of warnings for all x86
# implementations
Checks: >
  bugprone-*,
  cert-*,
  clang-analyzer-*,
  cppcoreguidelines-*,
  hicpp-*,
  llvm-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -hicpp-braces-around-statements,
  -readability-braces-around-statements,
  -llvm-header-guard

WarningsAsErrors: '*'

CheckOptions:
  # Naming conventions ------------------------------------------------------------------------------------------------

  # Case
  - {key: readability-identifier-naming.AbstractClassCase,               value: CamelCase }
  - {key: readability-identifier-naming.AggressiveDependentMemberLookup, value: 0         }
  - {key: readability-identifier-naming.ClassCase,                       value: CamelCase }
  - {key: readability-identifier-naming.ClassConstantCase,               value: lower_case}
  - {key: readability-identifier-naming.ClassMemberCase,                 value: lower_case}
  - {key: readability-identifier-naming.ClassMethodCase,                 value: lower_case}
  - {key: readability-identifier-naming.ConstantCase,                    value: lower_case}
  - {key: readability-identifier-naming.ConstantMemberCase,              value: lower_case}
  - {key: readability-identifier-naming.ConstantParameterCase,           value: lower_case}
  - {key: readability-identifier-naming.ConstantPointerParameterCase,    value: lower_case}
  - {key: readability-identifier-naming.ConstexprFunctionCase,           value: lower_case}
  - {key: readability-identifier-naming.ConstexprMethodCase,             value: lower_case}
  - {key: readability-identifier-naming.ConstexprVariableCase,           value: lower_case}
  - {key: readability-identifier-naming.EnumCase,                        value: CamelCase }
  - {key: readability-identifier-naming.EnumConstantCase,                value: UPPER_CASE}
  - {key: readability-identifier-naming.FunctionCase,                    value: lower_case}
  - {key: readability-identifier-naming.GlobalConstantCase,              value: lower_case}
  - {key: readability-identifier-naming.GlobalConstantPointerCase,       value: lower_case}
  - {key: readability-identifier-naming.GlobalFunctionCase,              value: lower_case}
  - {key: readability-identifier-naming.GlobalPointerCase,               value: lower_case}
  - {key: readability-identifier-naming.GlobalVariableCase,              value: lower_case}
  - {key: readability-identifier-naming.InlineNamespaceCase,             value: lower_case}
  - {key: readability-identifier-naming.LocalConstantCase,               value: lower_case}
  - {key: readability-identifier-naming.LocalConstantPointerCase,        value: lower_case}
  - {key: readability-identifier-naming.LocalPointerCase,                value: lower_case}
  - {key: readability-identifier-naming.LocalVariableCase,               value: lower_case}
  - {key: readability-identifier-naming.MemberCase,                      value: lower_case}
  - {key: readability-identifier-naming.MethodCase,                      value: lower_case}
  - {key: readability-identifier-naming.NamespaceCase,                   value: lower_case}
  - {key: readability-identifier-naming.ParameterCase,                   value: lower_case}
  - {key: readability-identifier-naming.ParameterPackCase,               value: lower_case}
  - {key: readability-identifier-naming.PointerParameterCase,            value: lower_case}
  - {key: readability-identifier-naming.PrivateMemberCase,               value: lower_case}
  - {key: readability-identifier-naming.PrivateMethodCase,               value: lower_case}
  - {key: readability-identifier-naming.ProtectedMemberCase,             value: lower_case}
  - {key: readability-identifier-naming.ProtectedMethodCase,             value: lower_case}
  - {key: readability-identifier-naming.PublicMemberCase,                value: lower_case}
  - {key: readability-identifier-naming.PublicMethodCase,                value: lower_case}
  - {key: readability-identifier-naming.StructCase,                      value: CamelCase }
  - {key: readability-identifier-naming.TemplateParameterCase,           value: lower_case}
  - {key: readability-identifier-naming.TemplateTemplateParameterCase,   value: CamelCase }
  - {key: readability-identifier-naming.TypeAliasCase,                   value: CamelCase }
  - {key: readability-identifier-naming.TypedefCase,                     value: CamelCase }
  - {key: readability-identifier-naming.TypeTemplateParameterCase,       value: CamelCase }
  - {key: readability-identifier-naming.UnionCase,                       value: CamelCase }
  - {key: readability-identifier-naming.ValueTemplateParameterCase,      value: lower_case}
  - {key: readability-identifier-naming.VariableCase,                    value: lower_case}
  - {key: readability-identifier-naming.VirtualMethodCase,               value: lower_case}

  # Prefix
  - {key: readability-identifier-naming.PrivateMemberPrefix,             value: m_ }
  - {key: readability-identifier-naming.ProtectedMemberPrefix,           value: m_ }
  - {key: readability-identifier-naming.TemplateParameterPrefix,         value: t_ }
  - {key: readability-identifier-naming.TemplateTemplateParameterPrefix, value: T_ }
  - {key: readability-identifier-naming.TypeTemplateParameterPrefix,     value: T_ }
  - {key: readability-identifier-naming.ValueTemplateParameterPrefix,    value: t_ }

  # Suffix

  # No effect in C++?
  # - {key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE}
  # - {key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE}
